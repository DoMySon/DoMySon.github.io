<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on 薛定谔的Bug</title>
    <link>https://domyson.github.io/post/</link>
    <description>Recent content in Posts on 薛定谔的Bug</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 06 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://domyson.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cgo</title>
      <link>https://domyson.github.io/2022/04/cgo/</link>
      <pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2022/04/cgo/</guid>
      <description>cgo 一种go与c交互的技术 开启cgo 要求系统安装C/C++工具链，macos和linux(gcc 自带)，windows(mingw),并确保环</description>
    </item>
    
    <item>
      <title>mysql100问</title>
      <link>https://domyson.github.io/2022/04/mysql100%E9%97%AE/</link>
      <pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2022/04/mysql100%E9%97%AE/</guid>
      <description>mysql面试题</description>
    </item>
    
    <item>
      <title>预处理器</title>
      <link>https://domyson.github.io/2020/07/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/</link>
      <pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2020/07/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/</guid>
      <description>&lt;h1 id=&#34;预处理器&#34;&gt;预处理器&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;#pragma&lt;/code&gt; 用于指示编译器完成一些特定的动作&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;#pragma message usermessage&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//example:test.c
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define IOS
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#if defined IOS
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;#pragma message &amp;#34;ready complie ios...&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//complie output:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   note: &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;pragma message: ready complie ios...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;#pragma once 确保头文件仅被编译一次&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//example:test.h
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#pragma once
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//example:test.c
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;test.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;test.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;#pragma pack(size_t) 指定内存对齐&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//example:test.c
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 2byte 对齐
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#pragma pack(2)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; foo{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; c1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; c2:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 4byte 对齐
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#pragma pack(4)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; bar{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; c1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    shirt s;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; c2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; foo)); &lt;span style=&#34;color:#75715e&#34;&gt;//8
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; bar)); &lt;span style=&#34;color:#75715e&#34;&gt;//12
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在不同编译器之间不可移植，在不同编译器可能以不同的方式解释，预处理器将忽略不被识别的此指令&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;指令&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;#define&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;定义宏&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;#include&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;包含一个源代码文件&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;#undef&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;取消一个定义的宏&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;#ifdef&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是否定义了宏&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;#ifndef&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是否没有定义一个宏&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;#if&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;条件检测&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;#else&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;条件分支&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;#elif&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;条件分支&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;#endif&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;结束条件分支&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;#error&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;当遇到标准错误，输出错误消息&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;#pragma&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;使用标准化方法，向编译器发布特殊的命令到编译器中&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;#line&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;重置下一行行数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;#line 100&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>pointer</title>
      <link>https://domyson.github.io/2020/05/pointer/</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2020/05/pointer/</guid>
      <description>xLua为Unity、 .Net、 Mono等C#环境增加Lua脚本编程的能力，借助xLua，这些Lua代码可以方便的和C#相互调用。</description>
    </item>
    
    <item>
      <title>Go 编译指示</title>
      <link>https://domyson.github.io/2020/04/go-%E7%BC%96%E8%AF%91%E6%8C%87%E7%A4%BA/</link>
      <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2020/04/go-%E7%BC%96%E8%AF%91%E6%8C%87%E7%A4%BA/</guid>
      <description>go pragma</description>
    </item>
    
    <item>
      <title>Msys2</title>
      <link>https://domyson.github.io/2020/03/msys2/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2020/03/msys2/</guid>
      <description>高性能web代理</description>
    </item>
    
    <item>
      <title>Go GC分析</title>
      <link>https://domyson.github.io/2020/02/go-gc%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2020/02/go-gc%E5%88%86%E6%9E%90/</guid>
      <description>go 内置命令</description>
    </item>
    
    <item>
      <title>go历代版本</title>
      <link>https://domyson.github.io/2020/02/go%E5%8E%86%E4%BB%A3%E7%89%88%E6%9C%AC/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2020/02/go%E5%8E%86%E4%BB%A3%E7%89%88%E6%9C%AC/</guid>
      <description>go版本变迁史</description>
    </item>
    
    <item>
      <title>Http</title>
      <link>https://domyson.github.io/2020/02/http/</link>
      <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2020/02/http/</guid>
      <description>解决并发场景下的数据竞争问题</description>
    </item>
    
    <item>
      <title>TLS</title>
      <link>https://domyson.github.io/2020/02/tls/</link>
      <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2020/02/tls/</guid>
      <description>解决并发场景下的数据竞争问题</description>
    </item>
    
    <item>
      <title>位运算</title>
      <link>https://domyson.github.io/2020/02/%E4%BD%8D%E8%BF%90%E7%AE%97/</link>
      <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2020/02/%E4%BD%8D%E8%BF%90%E7%AE%97/</guid>
      <description>Bitmap（基于位的映射）</description>
    </item>
    
    <item>
      <title>Go标准命令</title>
      <link>https://domyson.github.io/2020/01/go%E6%A0%87%E5%87%86%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 28 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2020/01/go%E6%A0%87%E5%87%86%E5%91%BD%E4%BB%A4/</guid>
      <description>go 内置命令</description>
    </item>
    
    <item>
      <title>channel</title>
      <link>https://domyson.github.io/2020/01/channel/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2020/01/channel/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;CSP(communicating sequential processes)&lt;/code&gt; 模型由并发执行实体(进程，线程或协程)，和消息通道组成，实体之间通过消息通道发送消息进行通信。和 &lt;code&gt;Actor&lt;/code&gt; 模型不同，&lt;code&gt;CSP&lt;/code&gt; 模型关注的是消息发送的载体，即通道，而不是发送消息的执行实体。Go 语言的并发模型参考了 CSP 理论，其中执行实体对应的是 &lt;code&gt;goroutine，&lt;/code&gt; 消息通道对应的就是 &lt;code&gt;channel&lt;/code&gt;。&lt;code&gt;CSP&lt;/code&gt; 模型的核心是：不通过共享内存来达到通讯，而是通过通讯来共享内存。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;channel&lt;/code&gt; 提供了一种通信机制，通过它，一个 &lt;code&gt;goroutine&lt;/code&gt; 可以与另一 &lt;code&gt;goroutine&lt;/code&gt; 发送消息。&lt;code&gt;channel&lt;/code&gt; 本身还需关联了一个类型，也就是可以发送数据的类型。可以通过 &lt;code&gt;len()&lt;/code&gt; 获取通道当前缓冲数量。 &lt;code&gt;cap()&lt;/code&gt; 获取通道最大缓冲。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>DockerNetwork</title>
      <link>https://domyson.github.io/2020/01/dockernetwork/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2020/01/dockernetwork/</guid>
      <description>Dockerfile是一个好东西</description>
    </item>
    
    <item>
      <title>Go Module</title>
      <link>https://domyson.github.io/2019/12/go-module/</link>
      <pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/12/go-module/</guid>
      <description>Go Mutex</description>
    </item>
    
    <item>
      <title>Unity内存管理</title>
      <link>https://domyson.github.io/2019/12/unity%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/12/unity%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;unity-托管内存&#34;&gt;Unity 托管内存&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;用户代码分配的内存本质上在 &lt;code&gt;IL2CPP&lt;/code&gt; 构建的 &lt;code&gt;VM&lt;/code&gt; 的托管内存(&lt;code&gt;Managed Memory&lt;/code&gt;)上，所以用户代码分配遵从于这个 &lt;code&gt;VM&lt;/code&gt; 的分配方式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;IL2CPP&lt;/code&gt; 采用的是 &lt;code&gt;Boehm&lt;/code&gt; 回收算法,这算法的缺陷是 &lt;code&gt;不分代&lt;/code&gt;，&lt;code&gt;不压缩&lt;/code&gt;，虽然提高了效率，但由于用户申请内存的不确定性，容易造成内存碎片，不利于此块的内存重使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内存以 &lt;code&gt;Block&lt;/code&gt; 来管理，当一个 &lt;code&gt;Block&lt;/code&gt; 6次GC没有被访问，才会返回给 OS。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Zombie Memory&lt;/code&gt;,由于用户不主动释放，但实际没有使用。那么这块内存将不会被回收。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于一个物体，应该是 &lt;code&gt;Destory&lt;/code&gt; 而不是置为 &lt;code&gt;Null&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下一代采用 &lt;code&gt;渐进式GC&lt;/code&gt;（分帧GC，使CPU峰值更平滑），可以手动开关。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Go锁</title>
      <link>https://domyson.github.io/2019/12/go%E9%94%81/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/12/go%E9%94%81/</guid>
      <description>Go Mutex</description>
    </item>
    
    <item>
      <title>Tree</title>
      <link>https://domyson.github.io/2019/09/tree/</link>
      <pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/09/tree/</guid>
      <description>二叉树</description>
    </item>
    
    <item>
      <title>ConsistentHash</title>
      <link>https://domyson.github.io/2019/08/consistenthash/</link>
      <pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/08/consistenthash/</guid>
      <description>一致性Hash算法</description>
    </item>
    
    <item>
      <title>Snowflake</title>
      <link>https://domyson.github.io/2019/08/snowflake/</link>
      <pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/08/snowflake/</guid>
      <description>分布式ID算法</description>
    </item>
    
    <item>
      <title>ASCII</title>
      <link>https://domyson.github.io/2019/08/ascii/</link>
      <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/08/ascii/</guid>
      <description>Docker是一个好东西</description>
    </item>
    
    <item>
      <title>unsafe包</title>
      <link>https://domyson.github.io/2019/08/unsafe%E5%8C%85/</link>
      <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/08/unsafe%E5%8C%85/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Golang 默认指针是类型安全的，但它有很多限制。Golang 还有非类型安全的指针，这就是 unsafe 包提供的 unsafe.Pointer。在某些情况下，它会使代码更高效，当然，也更危险。unsafe 包用于 Go 编译器，在编译阶段使用。从名字就可以看出来，它是不安全的，官方并不建议使用。Go 语言类型系统是为了安全和效率设计的，有时，安全会导致效率低下。unsafe 包绕过了 Go 的类型系统，达到直接操作内存的目的，使用它有一定的风险性。但是在某些场景下，使用 unsafe 包提供的函数会提升代码的效率，Go 源码中也是大量使用 unsafe 包。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Go性能分析</title>
      <link>https://domyson.github.io/2019/08/go%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 23 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/08/go%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</guid>
      <description>Go单元测试&amp;amp;基准测试</description>
    </item>
    
    <item>
      <title>TopK</title>
      <link>https://domyson.github.io/2019/07/topk/</link>
      <pubDate>Wed, 31 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/07/topk/</guid>
      <description>问题 在一堆数据里面找到前 K 大（也可以是前 K 小）的数。本文对于三个算法 QuickSort、HeapSort、BubbleSort 来比对 全局排序</description>
    </item>
    
    <item>
      <title>ClassicSort</title>
      <link>https://domyson.github.io/2019/07/classicsort/</link>
      <pubDate>Sat, 27 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/07/classicsort/</guid>
      <description>经典排序算法</description>
    </item>
    
    <item>
      <title>ILRuntime</title>
      <link>https://domyson.github.io/2019/07/ilruntime/</link>
      <pubDate>Thu, 25 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/07/ilruntime/</guid>
      <description>xLua为Unity、 .Net、 Mono等C#环境增加Lua脚本编程的能力，借助xLua，这些Lua代码可以方便的和C#相互调用。</description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>https://domyson.github.io/2019/07/redis/</link>
      <pubDate>Wed, 24 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/07/redis/</guid>
      <description>Redis是一种基于内存的数据库，并且提供一定的持久化功能。它的性能十分优越，可以支持每秒十几万此的读/写操作，其性能远超数据库，并且还支持集群、分布式、主从同步等配置，原则上可以无限扩展，让更多的数据存储在内存中，更让人欣慰的是它还支持一定的事务能力，这保证了高并发的场景下数据的安全和一致性。</description>
    </item>
    
    <item>
      <title>MD5</title>
      <link>https://domyson.github.io/2019/05/md5/</link>
      <pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/05/md5/</guid>
      <description>go 内置命令</description>
    </item>
    
    <item>
      <title>Protobuf3</title>
      <link>https://domyson.github.io/2019/05/protobuf3/</link>
      <pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/05/protobuf3/</guid>
      <description>一种数据交换格式</description>
    </item>
    
    <item>
      <title>Goroutine</title>
      <link>https://domyson.github.io/2019/05/goroutine/</link>
      <pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/05/goroutine/</guid>
      <description>Go 并发原理</description>
    </item>
    
    <item>
      <title>Bitmap</title>
      <link>https://domyson.github.io/2019/05/bitmap/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/05/bitmap/</guid>
      <description>Bitmap（基于位的映射）</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://domyson.github.io/2019/03/docker/</link>
      <pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/03/docker/</guid>
      <description>Docker是一个好东西</description>
    </item>
    
    <item>
      <title>Dockerfile</title>
      <link>https://domyson.github.io/2019/03/dockerfile/</link>
      <pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/03/dockerfile/</guid>
      <description>Dockerfile是一个好东西</description>
    </item>
    
    <item>
      <title>Nginx</title>
      <link>https://domyson.github.io/2019/03/nginx/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/03/nginx/</guid>
      <description>高性能web代理</description>
    </item>
    
    <item>
      <title>Markdown</title>
      <link>https://domyson.github.io/2019/03/markdown/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/03/markdown/</guid>
      <description>文本标记</description>
    </item>
    
    <item>
      <title>xLua</title>
      <link>https://domyson.github.io/2019/03/xlua/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/03/xlua/</guid>
      <description>xLua为Unity、 .Net、 Mono等C#环境增加Lua脚本编程的能力，借助xLua，这些Lua代码可以方便的和C#相互调用。</description>
    </item>
    
    <item>
      <title>Lock</title>
      <link>https://domyson.github.io/2019/02/lock/</link>
      <pubDate>Tue, 26 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/02/lock/</guid>
      <description>解决并发场景下的数据竞争问题</description>
    </item>
    
    <item>
      <title>I/O</title>
      <link>https://domyson.github.io/2019/02/i/o/</link>
      <pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/02/i/o/</guid>
      <description>gc 算法</description>
    </item>
    
    <item>
      <title>GC</title>
      <link>https://domyson.github.io/2019/02/gc/</link>
      <pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/02/gc/</guid>
      <description>gc 算法</description>
    </item>
    
    <item>
      <title></title>
      <link>https://domyson.github.io/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/1/01/</guid>
      <description>defer FILO 作用域屏蔽 参数确定 闭包</description>
    </item>
    
    <item>
      <title></title>
      <link>https://domyson.github.io/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/1/01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://domyson.github.io/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/1/01/</guid>
      <description>git reset &amp;ndash;hard HEAD 强制复位到服务器版本 ssh-keygen -t rsa -C &amp;ldquo;youremail@example.com&amp;rdquo; git checkout branch 切换分支 git checkout &amp;ndash;xxx 忽略某个文件的修改 git checkout . 忽略所有修改</description>
    </item>
    
    <item>
      <title></title>
      <link>https://domyson.github.io/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/1/01/</guid>
      <description>#Go mod go mod init mod_name 模块替换 如 golang.org =&amp;gt; github.com 默认 go mod edit -replace old@version=new@version 其中old包的版本可以不知道，new包则可以为latest</description>
    </item>
    
    <item>
      <title></title>
      <link>https://domyson.github.io/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/1/01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://domyson.github.io/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/1/01/</guid>
      <description>a+=b,a=a+b var a int = 10 var b float32 = 11f //如果是 a+=b 编译器不会报错,因为编译器自动将a（向上转换）转为float计算结果，然后再转为int //如果是 a=a+b 编译器会</description>
    </item>
    
    <item>
      <title></title>
      <link>https://domyson.github.io/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/1/01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://domyson.github.io/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/1/01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://domyson.github.io/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/1/01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://domyson.github.io/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/1/01/</guid>
      <description>线程的实现模型主要有3种： 内核级线程模型、用户级线程模型和两级线程模型（也称混合型线程模型），它们之间最大的差异就在于用户线程与内核调度实体</description>
    </item>
    
    <item>
      <title></title>
      <link>https://domyson.github.io/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/1/01/</guid>
      <description>零GC 避免开装箱 避免创建临时对象 加载 LoadAdd &amp;lt; Load One by One 卸载 分代回收 缓存策略 内存 Monitor 压缩 首选LZ4 自定义可使用 GZip UI 对于动画组件和粒子特效的UI 使用 La</description>
    </item>
    
    <item>
      <title></title>
      <link>https://domyson.github.io/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/1/01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://domyson.github.io/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/1/01/</guid>
      <description>一、table 添加元素 local t = {} for i = 1,10^6 do t[#t+1] = i --0.125s table.insert(t,i) --0.2s table.insert(t,1,i) --无法计算 end 二、拼接字符串 local s0 = {} -- 初始化含有10万数据的table for i = 1, 10^5 do s0[i]=&amp;#39;a&amp;#39; end</description>
    </item>
    
    <item>
      <title></title>
      <link>https://domyson.github.io/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/1/01/</guid>
      <description>Liunx 文件系统 对于 drwxr-xr-x 4 root root 4096 Nov 28 00:00 hook 文件类型 符号 描述 d 目录 l 符号链接 s 套接字文件 b 块设备文件 c 字符设备文件 p 命名管道文件 - 普通文件，不属于上述任</description>
    </item>
    
    <item>
      <title></title>
      <link>https://domyson.github.io/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/1/01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://domyson.github.io/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/1/01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://domyson.github.io/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/1/01/</guid>
      <description>title: 链表反转 date: 2022-04-06 tags: [] categories: [&amp;ldquo;算法&amp;rdquo;] description: toc: true draft: true 假定链表元素为 1 -&amp;gt; 2 -&amp;gt; 3 -&amp;gt; 4,需要变为 4 -&amp;gt; 3 -&amp;gt; 2 -&amp;gt; 1 stack方式 原地反转</description>
    </item>
    
    <item>
      <title>CRC(循环冗余校验)</title>
      <link>https://domyson.github.io/1/01/crc%E5%BE%AA%E7%8E%AF%E5%86%97%E4%BD%99%E6%A0%A1%E9%AA%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/1/01/crc%E5%BE%AA%E7%8E%AF%E5%86%97%E4%BD%99%E6%A0%A1%E9%AA%8C/</guid>
      <description>CRC 是一种根据网络数据包或电脑文件等数据产生简短固定位数校验码的一种散列函数，主要用来检测或校验数据传输或者保存后可能出现的错误。它是利用除法及余数的原理来作错误侦测的。</description>
    </item>
    
    <item>
      <title>Lua元表(metatable)</title>
      <link>https://domyson.github.io/1/01/lua%E5%85%83%E8%A1%A8metatable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/1/01/lua%E5%85%83%E8%A1%A8metatable/</guid>
      <description>非可逆加密 MD5(Messgae-digest algorithm5)信息摘要 将任意长度的明文字符串生成 128bit 的哈希值，也为32个十六进制的数 SHA(Secure Hash Algorithm)信息摘要 SHA-1 生成</description>
    </item>
    
  </channel>
</rss>
