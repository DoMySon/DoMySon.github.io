<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sort on 薛定谔的Bug</title>
    <link>https://domyson.github.io/tags/sort/</link>
    <description>Recent content in Sort on 薛定谔的Bug</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 31 Jul 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://domyson.github.io/tags/sort/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TopK</title>
      <link>https://domyson.github.io/2019/07/topk/</link>
      <pubDate>Wed, 31 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/07/topk/</guid>
      <description>问题  在一堆数据里面找到前 K 大（也可以是前 K 小）的数。本文对于三个算法 QuickSort、HeapSort、BubbleSort 来比对
 全局排序  使用 QuickSort、HeapSort、BubbleSort 进行全局排序，然后取前 K 个或后 K 个。时间复杂度随排序算法而定
 局部排序  基于上一个问题，对于前 K 个数来说，后面的排序与否其实不重要，只需要排序前 K 个，那么首先算法必须是稳定排序，BubbleSort 是稳定排序算法，通过冒泡 K 次即可得到结果。时间复杂度 O(n*K)
 堆  那么对于前 K 个数它们的排序与否也不重要，只要大于后面的数即可，那么只需要前 K 个元素构成一个小顶堆，然后遍历剩下 n-K 个元素，再调整堆，保证这个堆所有元素均大于等于剩下的 n-K 个元素即可。时间复杂度为 O((n-K)logK)
 减治算法  与分治算法不同的是：减治算法是将问题分为若干个子问题，只要其中一个子问题得解，那么这个问题整体得解，比如二分查找法 BinarySearch。时间复杂度为 O(K*log(n))
 /* 二分查找法的缺陷是要么数组是有序的，要么得知道具体目标值 */ func BinarySearch(arr []int,low,high,target int) int{  if low &amp;gt; high {  return -1  }  mid := (low+high)/2  if arr[mid] == target {  return mid  }  if arr[mid] &amp;gt; target {  return BinarySearch(arr,low,mid-1,target)  }else{  return BianrySearch(arr,mid+1,target)  } } </description>
    </item>
    
    <item>
      <title>ClassicSort</title>
      <link>https://domyson.github.io/2019/07/classicsort/</link>
      <pubDate>Sat, 27 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/2019/07/classicsort/</guid>
      <description>&lt;h1 id=&#34;概念&#34;&gt;概念&lt;/h1&gt;
&lt;h2 id=&#34;稳定排序非稳定排序&#34;&gt;稳定排序，非稳定排序&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;如果 a 原本在 b 的前面，且 a == b，排序之后 a 仍然在 b 的前面，则为稳定排序。若可能 a 不在 b 的后面则为  &lt;code&gt;非稳定排序&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;原地排序非原地排序&#34;&gt;原地排序，非原地排序&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;原地排序就是指在排序过程中不申请多余的存储空间，只利用原来存储待排数据的存储空间进行比较和交换的数据排序。若利用了其他辅助数组，则为 &lt;code&gt;非原地排序&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;时间复杂度&#34;&gt;时间复杂度&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;一个算法执行所耗费的时间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;空间复杂度&#34;&gt;空间复杂度&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;完成算法所需的内存空间大小&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>
