<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on 薛定谔的BUG</title>
    <link>https://DoMySon.github.io/categories/C/</link>
    <description>Recent content in C on 薛定谔的BUG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 04 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://DoMySon.github.io/categories/C/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Preprocessor</title>
      <link>https://DoMySon.github.io/2020/07/Preprocessor/</link>
      <pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://DoMySon.github.io/2020/07/Preprocessor/</guid>
      <description>&lt;h1 id=&#34;预处理器&#34;&gt;预处理器&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;#pragma&lt;/code&gt; 用于指示编译器完成一些特定的动作&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;#pragma message usermessage&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;//example:test.c
#include &amp;lt;stdio.h&amp;gt;
#define IOS
#if defined IOS
    #pragma message &amp;quot;ready complie ios...&amp;quot;
#endif
//complie output:
    note: #pragma message: ready complie ios...
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;#pragma once 确保头文件仅被编译一次&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;//example:test.h
#pragma once
int value = 10;
//example:test.c
#include &amp;quot;test.h&amp;quot;
#include &amp;quot;test.h&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;#pragma pack(size_t) 指定内存对齐&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;//example:test.c
// 2byte 对齐
#pragma pack(2)
struct foo{
    char c1;
    char c2:
    short 2;
    int i;
};

// 4byte 对齐
#pragma pack(4)
struct bar{
    char c1;
    shirt s;
    char c2;
    int i;
};

void main(){
    printf(&amp;quot;%d\n&amp;quot;,sizeof(struct foo)); //8
    printf(&amp;quot;%d\n&amp;quot;,sizeof(struct bar)); //12
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在不同编译器之间不可移植，在不同编译器可能以不同的方式解释，预处理器将忽略不被识别的此指令&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;指令&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;描述&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;#define&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;定义宏&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;#include&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;包含一个源代码文件&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;#undef&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;取消一个定义的宏&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;#ifdef&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;是否定义了宏&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;#ifndef&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;是否没有定义一个宏&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;#if&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;条件检测&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;#else&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;条件分支&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;#elif&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;条件分支&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;#endif&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;结束条件分支&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;#error&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;当遇到标准错误，输出错误消息&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;#pragma&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;使用标准化方法，向编译器发布特殊的命令到编译器中&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;#line&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;重置下一行行数&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;#line 100&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>pointer</title>
      <link>https://DoMySon.github.io/2020/05/pointer/</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://DoMySon.github.io/2020/05/pointer/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Cgo</title>
      <link>https://DoMySon.github.io/2019/08/Cgo/</link>
      <pubDate>Fri, 23 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://DoMySon.github.io/2019/08/Cgo/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>