<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSharp on 薛定谔的BUG</title>
    <link>http://www.domyson.cn/categories/CSharp/</link>
    <description>Recent content in CSharp on 薛定谔的BUG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 31 Aug 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.domyson.cn/categories/CSharp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C#不安全代码</title>
      <link>http://www.domyson.cn/2019/08/C#%E4%B8%8D%E5%AE%89%E5%85%A8%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Sat, 31 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.domyson.cn/2019/08/C#%E4%B8%8D%E5%AE%89%E5%85%A8%E4%BB%A3%E7%A0%81/</guid>
      <description>&lt;h1 id=&#34;关键字&#34;&gt;关键字&lt;/h1&gt;

&lt;h2 id=&#34;volatile&#34;&gt;&lt;code&gt;volatile&lt;/code&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;用于多线程变量&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;int i1;

//作用于多线程变量
//但不能作用于局部变量
volatile int i2;

/*
多个线程同时访问一个变量，CLR为了效率，允许每个线程进行本地缓存，这就导致了变量的不一致性。volatile就是为了解决这个问题，volatile修饰的变量，不允许线程进行本地缓存，每个线程的读写都是直接操作在共享内存上，这就保证了变量始终具有一致性。

编译器在优化代码时，可能会把经常用到的代码存在Cache里面，然后下一次调用就直接读取Cache而不是内存，这样就大大提高了效率。但是问题也随之而来了。

在多线程程序中，如果把一个变量放入Cache后，又有其他线程改变了变量的值，那么本线程是无法知道这个变化的。它可能会直接读Cache里的数据。但是很不幸，Cache里的数据已经过期了，读出来的是不合时宜的脏数据。这时就会出现bug。

用Volatile声明变量可以解决这个问题。用Volatile声明的变量就相当于告诉编译器，我不要把这个变量写Cache，因为这个变量是可能发生改变的。
*/
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>CSharp&#39;s GC</title>
      <link>http://www.domyson.cn/2019/08/CSharps-GC/</link>
      <pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.domyson.cn/2019/08/CSharps-GC/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;.NET的GC机制有这样两个问题：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;GC并不是能释放所有的资源。它并不能自动释放非托管资源。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;GC并不是实时性的，这将会造成系统性能上的瓶颈和不确定性。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;GC并不是实时性的，这会造成系统性能上的瓶颈和不确定性。所以有了&lt;code&gt;IDisposable&lt;/code&gt;接口，&lt;code&gt;IDisposable&lt;/code&gt;接口定义了&lt;code&gt;Dispose&lt;/code&gt;方法，这个方法用来供程序员显式调用以释放非托管资源。使用&lt;code&gt;using&lt;/code&gt;语句可以简化资源管理。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://www.domyson.cn/images/abc.png&#34; alt=&#34;XX&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C#多线程</title>
      <link>http://www.domyson.cn/2019/05/C#%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Thu, 30 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.domyson.cn/2019/05/C#%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;进程是CPU资源分配的最小单位，线程是CPU调度的最小单位。可以理解为，打开一个应用程序时，操作系统启动一个进程，为其分配虚拟内存、文件句柄等资源，一个进程至少拥有一个线程，这些线程共享该进程的资源（内存和堆），但是每个线程都有独立的栈，以记录函数的执行位置和局部变量。CPU对线程的调度可以实现任务的并行执行，提高程序的运行效率。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;锁&lt;/code&gt; 确保同一份资源不会被多个线程同时使用&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>